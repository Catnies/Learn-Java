# 事件监听模块
events {
    worker_connections  1024;
}


# 配置HTTP服务
http {
    # include可以合并来自其他文件的配置内容
    # include /etc/nginx/conf.d/*.conf;

    # 让nginx可以正确识别文件后缀所对应的类型
    include       /etc/nginx/mime.types;

    # 负载均衡, 使用 upstream 块.
    # 设置上游服务器名称 mybackends
    # 我们就可以在 proxypass 里使用 http://mybackends; 就能引导到上游服务器里了
    upstream mybackends {
        # 当然可以给每个上游服务器设置权重
        server locahost:19132 weight=10;
        server locahost:3001 weight=1;
    }

    # 创建服务器
    server {
        # 监听 80 端口
        listen 80;
        # 服务器的名字
        server_name locahost;

        # root 让nginx返回这个文件夹里面的内容, index可以指定默认的文件.
        root /etc/nginx/data;
        index custom.html;
        error_page 404 /404.html;

        # 返回 200 状态码
        # return 200 "What Fuck?\n"

        # location 可以定义用户访问时携带的信息, 然后定义转发到不同的页面.
        # 格式: location [匹配模式] [路径] {}
        # 匹配模式: = 表示精确匹配, ^~ 表示优先前缀匹配, ~ 和 ~* 表示正则匹配, 空格表示普通前缀匹配 
        #
        # 这里的意思是, 粗匹配用户的访问请求里是否包含 /app , 例如 http://localhost/app/  http://localhost/apple/ 都可以匹配. 
        # 还有一些需要注意的是, 请求最后需要加上 / , 例如: http://localhost/app/ ,否则会以为用户要找的是 app 这个文件. 
        location  /app {
            root /etc/nginx/data;
        }

        # 不过, 如果需要完全匹配, 则需要在 localhost 和 路径 之间添加一个额外的参数. 
        location = /app/data.html {
            root /etc/nginx/data;
        }

        # 我们还可以使用正则表达式, 限制访问.
        location ~ /app/regex[1-3].html {
            root /etc/nginx/data;
        }

        # 这个代表, 当请求时, 先尝试找uri的文件, 如果没有找到就找uri这个文件夹(里面的index), 如果都没找到, 就返回404. 
        location / {
            try_files $uri $uri/ =404;
        }

        # 还能重定向, 访问 /temp 时, 会自动重定向到 /app/index.html .
        rewrite /temp /app/index.html;

        # 反向代理, 当访问 /repo 时, 会被转发到 19132 端口.
        location /repo {
            proxy_pass http://locahost:19132;
        }

    }


    # 二级域名重定位
    server {
        server_name repo.yourdomain.com;
        listen 80;
        listen [::]:80;
        listen 443;
        listen [::]:443;
        # 秘钥文件路径
        ssl_certificate /usr/local/openresty/nginx/cert/catnies.top.pem;
        ssl_certificate_key /usr/local/openresty/nginx/cert/catnies.top.key;

        location / {
            proxy_pass http://127.0.0.1:19132;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
